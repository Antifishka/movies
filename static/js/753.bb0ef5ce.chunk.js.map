{"version":3,"file":"static/js/753.bb0ef5ce.chunk.js","mappings":"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","sources":["components/MoviesItem/MoviesItem.styled.js","components/MoviesItem/MoviesItem.jsx","constants/constants.js","pages/Home/Home.styled.js","components/SearchForm/SearchForm.styled.js","components/SearchForm/SearchForm.jsx","pages/Movies/Movies.jsx","services/api.js"],"sourcesContent":["import styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\nexport const MoviesCard = styled.li`\n  padding: 4px;\n  border-radius: 4px;\n  overflow: hidden;\n  box-shadow: 0px 1px 1px rgb(0 0 0 / 12%), \n  0px 4px 4px rgb(0 0 0 / 6%), \n  1px 4px 6px rgb(0 0 0 / 16%);\n\n  transform: scale(1);\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus{\n    transform: scale(1.03);\n  };\n`;\n\nexport const StyledLink = styled(Link)`\n  text-decoration: none;\n  color: inherit;\n`;\n\nexport const MoviesImg = styled.img`\n  width: 100%;\n  border-radius: 4px;\n  height: 300px;\n  object-fit: cover;\n  margin-bottom: auto;\n`;\n\nexport const MoviesCardInfo = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 8px 0 0 0;\n`;\n\nexport const MoviesTitle = styled.h4`\n  max-width: 158px; \n`;\n\nexport const MoviesVote = styled.p`\n  padding: 2px 4px;\n  border-radius: 4px;\n  color: white;\n  background-color: orangered;\n\n  font-size: 12px; \n  font-weight: 600;\n`;","import { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { MoviesCard, StyledLink, MoviesImg, MoviesCardInfo, MoviesTitle, MoviesVote } from \"./MoviesItem.styled\";\n\nexport const MoviesItem = ({ id, title, imagePath, vote }) => {\n    const { pathname, search } = useLocation();\n    const fromPage = `${pathname}${search}`;\n\n    return (\n        <MoviesCard>\n            <StyledLink to={`/movies/${id}`} state={{from: fromPage}}>\n                <MoviesImg src={imagePath} alt={title} />\n                <MoviesCardInfo>\n                    <MoviesTitle>{title}</MoviesTitle>\n                    <MoviesVote>{vote}\n                    </MoviesVote>\n                </MoviesCardInfo>\n            </StyledLink>\n        </MoviesCard>\n    );\n};\n\nMoviesItem.propTypes = {\n    // id: PropTypes.number.isRequired,\n    imagePath: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    // vote: PropTypes.number.isRequired,\n}","export const BASE_IMAGE_URL = `https://image.tmdb.org/t/p/w500`;\nexport const PlACEHOLDER_IMAGE_URL = `https://via.placeholder.com/100x150`;\nexport const PlACEHOLDER_POSTER_URL = `https://placehold.jp/200x300.png`;","import styled from \"styled-components\";\n\nexport const HomeTitle = styled.h2`\n  padding-top: 20px;\n  margin-bottom: 20px;\n  text-align: center;\n`;\n\nexport const MoviesList = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  gap: 16px;\n  margin-bottom: 20px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\n","import styled from \"styled-components\";\n\nexport const FormContainer = styled.div`\n    padding: 16px 0;\n`;\n\nexport const Form = styled.form`\n    position: relative;\n    width: 100%;\n    max-width: 350px;\n    margin: 0 auto;\n    border-radius: 4px;\n    overflow: hidden;\n`;\n\nexport const FormInput = styled.input`\n    display: inline-block;\n    width: 100%;\n    height: 33px;\n    font-size: 18px;\n    border: 1px solid black;\n    border-radius: 4px;\n    outline: none;\n    padding: 4px;\n\n::placeholder {\n    font: inherit;\n    font-size: 16px;\n}\n`;\n\nexport const FormButton = styled.button`\n    position: absolute;\n    right: 0;\n    top: 0;\n    height: 100%;\n    display: inline-block;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding-right: 6px;\n    padding-left: 7px;\n    cursor: pointer;\n    border: 1px solid orangered;\n    outline: none;\n    \n    color: white;\n    background-color: orangered;\n\n    opacity: 1;\n    transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n:hover,\n:focus {\n    opacity: 0.7;\n}\n`;","import { useState } from \"react\";\nimport { toast } from 'react-toastify';\nimport { BiSearch } from 'react-icons/bi';\nimport { FormContainer, Form, FormInput, FormButton } from \"./SearchForm.styled\";\nimport PropTypes from 'prop-types';\n\nexport const SearchForm = ({onSubmit, onChange}) => {\n  const [query, setQuery] = useState('');\n\n  const handleQueryChange = e => {\n    setQuery(e.currentTarget.value.toLowerCase());\n    onChange(e.currentTarget.value.toLowerCase());\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    \n    if (query.trim() === '') {\n      return toast.warn('Enter your query in the search bar!');\n    };    \n\n    onSubmit(query);\n    setQuery('');\n  };\n  \n  return (\n    <FormContainer>\n      <Form onSubmit={handleSubmit}>\n        <FormInput\n          type=\"text\"\n          name=\"query\" \n          value={query}        \n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movies\"\n          onChange={handleQueryChange}        \n        />\n\n        <FormButton type=\"submit\">\n          <BiSearch size={23}/>\n        </FormButton>\n      </Form>\n    </FormContainer>\n  );\n};\n\nSearchForm.propsType = {\n  onSubmit: PropTypes.func.isRequired,\n}","import { useState, useEffect } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport API from 'services/api';\nimport { toast } from 'react-toastify';\nimport { MoviesList } from \"../Home/Home.styled\";\nimport { SearchForm } from \"components/SearchForm/SearchForm\";\nimport { Loader } from \"components/Loader/Loader\";\nimport { MoviesItem } from \"components/MoviesItem/MoviesItem\";\nimport { BASE_IMAGE_URL, PlACEHOLDER_IMAGE_URL } from 'constants/constants';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [query, setQuery] = useState(searchParams.get('search') ?? '');\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (!query) {\n      //Первый рендер, query это пустая строка, не делаем fetch \n      return;\n    }\n    setIsLoading(true);\n    getSearchMovies();\n\n    async function getSearchMovies() {\n      try {\n        const fetchMovies = await API.fetchSearchMovies(query);\n        console.log(fetchMovies);\n        setMovies(fetchMovies);\n\n      } catch (error) {\n        console.log(error);\n        toast.error(`Sorry, there are no movies matching your search query. Please try again.`);\n      } finally {\n        setIsLoading(false);\n      };\n    };\n  }, [query]);\n\n  const handleFormSubmit = (query) => {\n    console.log(query);\n\n    setQuery(query);\n    setMovies([]);\n  };\n\n  const updateQueryString = (value) => {\n    setSearchParams(value !== '' ? { search: value } : {});\n  };\n  \n  return (\n    <main>\n      <SearchForm onSubmit={handleFormSubmit} onChange={updateQueryString} />\n\n      {isLoading && <Loader />} \n\n      <MoviesList>\n        {movies.map(({ id, title, poster_path, vote_average }) => (\n          <MoviesItem \n            key={id}\n            id={id}\n            title={title} \n            imagePath={poster_path\n              ? BASE_IMAGE_URL + poster_path\n              : PlACEHOLDER_IMAGE_URL} \n            vote={vote_average\n              ? vote_average.toFixed(1)\n              : `No vote`\n          } />\n        ))}\n      </MoviesList>\n    </main>\n  );\n};\n\nexport default Movies;","import axios from \"axios\";\n\nconst apiInstance = axios.create({\n    baseURL: 'https://api.themoviedb.org/3/',\n    params: {\n        api_key: 'e09f06c48afcb3ebfd8a25b0b6965d1e',\n        language: 'en-US',\n        // page: `${page}`,\n    },\n});\n\nasync function fetchTrendingMovies(page) {\n    const response = await apiInstance.get(`trending/movie/day?page=${page}`);\n     \n    const data = response.data;\n\n    if (!data.results.length) {\n        throw new Error(`Sorry, there are no movies.`)\n    }\n\n    return data;\n};\n\nasync function fetchMovieById(id) {\n    const { data } = await apiInstance.get(`movie/${id}`);\n\n    return data;\n}\n\nasync function fetchSearchMovies(query) {\n    const response = await apiInstance.get(`search/movie?query=${query}`);\n\n    const searchMovies = response.data.results;\n\n    if (!searchMovies.length) {\n        throw new Error(`Sorry, there are no movies matching your search query. Please try again.`)\n    }\n\n    return searchMovies;\n}\n\nasync function fetchMovieCredits(id) {\n    const response = await apiInstance.get(`movie/${id}/credits`);\n\n    const cast = response.data.cast;\n\n    if (!cast.length) {\n        throw new Error(`Not found cast...`)\n    }\n\n    return cast;\n}\n\nasync function fetchMovieReviews(id) {\n    const response = await apiInstance.get(`movie/${id}/reviews`);\n\n    const reviews = response.data.results;\n\n    return reviews;\n};\n\nconst api = {\n    fetchTrendingMovies,\n    fetchMovieById,\n    fetchSearchMovies,\n    fetchMovieCredits,\n    fetchMovieReviews,\n};\n\nexport default api;"],"names":["MoviesCard","styled","StyledLink","Link","MoviesImg","MoviesCardInfo","MoviesTitle","MoviesVote","MoviesItem","id","title","imagePath","vote","useLocation","pathname","search","fromPage","to","state","from","src","alt","BASE_IMAGE_URL","PlACEHOLDER_IMAGE_URL","PlACEHOLDER_POSTER_URL","HomeTitle","MoviesList","FormContainer","Form","FormInput","FormButton","SearchForm","onSubmit","onChange","useState","query","setQuery","e","preventDefault","trim","toast","type","name","value","autoComplete","autoFocus","placeholder","currentTarget","toLowerCase","size","propsType","PropTypes","useSearchParams","searchParams","setSearchParams","get","movies","setMovies","isLoading","setIsLoading","useEffect","API","fetchMovies","console","log","getSearchMovies","Loader","map","poster_path","vote_average","toFixed","apiInstance","axios","baseURL","params","api_key","language","fetchTrendingMovies","page","response","data","results","length","Error","fetchMovieById","fetchSearchMovies","searchMovies","fetchMovieCredits","cast","fetchMovieReviews","reviews","api"],"sourceRoot":""}