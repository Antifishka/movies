{"version":3,"file":"static/js/779.617bd34e.chunk.js","mappings":"+PAGaA,EAAcC,EAAAA,QAAAA,GAAH,uFAMXC,EAAcD,EAAAA,QAAAA,GAAH,+JAILE,EAAAA,EAAAA,MAAAA,OAEHA,EAAAA,EAAAA,QAAAA,MAGHC,EAAeH,EAAAA,QAAAA,GAAH,gDAIZI,EAAUJ,EAAAA,QAAAA,EAAH,4C,SCWpB,EA5BgB,WACd,IAAQK,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAYA,OAVAC,EAAAA,EAAAA,YAAU,WAAM,wCAGd,oGAC+BC,EAAAA,EAAAA,kBAAsBN,GADrD,OACUO,EADV,OAEIC,QAAQC,IAAIF,GACZH,EAAWG,GAHf,4CAHc,0DACdG,EAOD,GAAE,CAACV,KAGF,8BACGG,EAAQQ,OAAS,GACd,SAACjB,EAAD,UACGS,EAAQS,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,UAACnB,EAAD,YACE,UAACE,EAAD,sBAAuBgB,MACvB,uBAAIC,MAFYF,EADP,OAMf,SAACd,EAAD,wDAGT,C,wDC9BKiB,E,QAAcC,GAAAA,OAAa,CAC7BC,QAAS,gCACTC,OAAQ,CACJC,QAAS,mCACTC,SAAU,WAKHC,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAmCC,GAAnC,yFAC2BP,EAAYQ,IAAZ,kCAA2CD,IADtE,UACUE,EADV,QAGUC,EAAOD,EAASC,MAEZC,QAAQhB,OALtB,sBAMc,IAAIiB,MAAJ,+BANd,gCASWF,GATX,kEAYeG,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA8BhB,GAA9B,yFAC2BG,EAAYQ,IAAZ,gBAAyBX,IADpD,uBACYa,EADZ,EACYA,KADZ,kBAGWA,GAHX,kEAMeI,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAiCC,EAAOR,GAAxC,yFAC2BP,EAAYQ,IAAZ,6BAAsCO,EAAtC,iBAAoDR,IAD/E,UACUE,EADV,QAGUC,EAAOD,EAASC,MAEZC,QAAQhB,OALtB,sBAMc,IAAIiB,MAAJ,4EANd,gCASWF,GATX,kEAYeM,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAiCnB,GAAjC,yFAC2BG,EAAYQ,IAAZ,gBAAyBX,EAAzB,aAD3B,UACUY,EADV,QAGUQ,EAAOR,EAASC,KAAKO,MAEjBtB,OALd,sBAMc,IAAIiB,MAAJ,qBANd,gCASWK,GATX,kEAYeC,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAiCrB,GAAjC,yFAC2BG,EAAYQ,IAAZ,gBAAyBX,EAAzB,aAD3B,cACUY,EADV,OAGUtB,EAAUsB,EAASC,KAAKC,QAHlC,kBAKWxB,GALX,kEAQA,IAAMgC,EAAM,CACRb,oBA5DJ,SASmC,GAApBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EAoDXO,eA1CF,SAE4B,GAAfA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EAyCXC,kBAzCJ,SAMiC,EAAlBA,GAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EAoCXE,kBApCJ,SAYiC,GAAlBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EAyBXE,kBAzBJ,SAYiC,GAAlBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,GAgBf,K","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","services/api.js"],"sourcesContent":["import styled from \"styled-components\";\nimport { theme } from \"globalStyles/theme\";\n\nexport const ReviewsList = styled.ul`\n  padding: 16px 0;\n  list-style: disc;\n  margin-left: 10px;\n`;\n\nexport const ReviewsItem = styled.li`\n  padding: 20px;\n  margin-bottom: 20px;\n  border: 1px solid #EEEEEE;\n  border-radius: ${theme.radii.normal};\n  overflow: hidden;\n  box-shadow: ${theme.shadows.card};\n`;\n\nexport const ReviewsTitle = styled.h4`\n  margin-bottom: 10px;\n`;\n\nexport const Message = styled.p`\n  padding: 16px 0;\n`;","import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport API from \"../../services/api\";\nimport { ReviewsList, ReviewsItem, ReviewsTitle, Message } from \"./Reviews.styled\";\n\nconst Reviews = () => {\n  const { movieId } = useParams(); \n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    getMovieReviews();\n\n    async function getMovieReviews() {\n        const fetchReviews = await API.fetchMovieReviews(movieId);\n        console.log(fetchReviews);\n        setReviews(fetchReviews);\n    };\n  }, [movieId]);\n\n  return (\n    <>\n      {reviews.length > 0\n        ? <ReviewsList>\n            {reviews.map(({ id, author, content }) => \n              <ReviewsItem key={id}>\n                <ReviewsTitle>Author: {author}</ReviewsTitle>  \n                <p>{content}</p>\n              </ReviewsItem>)} \n          </ReviewsList >\n        : <Message>We don't have any reviews for this movie</Message>}\n    </>\n  );\n};\nexport default Reviews;","import axios from \"axios\";\n\nconst apiInstance = axios.create({\n    baseURL: 'https://api.themoviedb.org/3/',\n    params: {\n        api_key: 'e09f06c48afcb3ebfd8a25b0b6965d1e',\n        language: 'en-US',\n        // page: `${page}`,\n    },\n});\n\nasync function fetchTrendingMovies(page) {\n    const response = await apiInstance.get(`trending/movie/day?page=${page}`);\n     \n    const data = response.data;\n\n    if (!data.results.length) {\n        throw new Error(`Sorry, there are no movies.`)\n    }\n\n    return data;\n};\n\nasync function fetchMovieById(id) {\n    const { data } = await apiInstance.get(`movie/${id}`);\n\n    return data;\n}\n\nasync function fetchSearchMovies(query, page) {\n    const response = await apiInstance.get(`search/movie?query=${query}&page=${page}`);\n\n    const data = response.data;\n\n    if (!data.results.length) {\n        throw new Error(`Sorry, there are no movies matching your search query. Please try again.`)\n    }\n\n    return data;\n}\n\nasync function fetchMovieCredits(id) {\n    const response = await apiInstance.get(`movie/${id}/credits`);\n\n    const cast = response.data.cast;\n\n    if (!cast.length) {\n        throw new Error(`Not found cast...`)\n    }\n\n    return cast;\n}\n\nasync function fetchMovieReviews(id) {\n    const response = await apiInstance.get(`movie/${id}/reviews`);\n\n    const reviews = response.data.results;\n\n    return reviews;\n};\n\nconst api = {\n    fetchTrendingMovies,\n    fetchMovieById,\n    fetchSearchMovies,\n    fetchMovieCredits,\n    fetchMovieReviews,\n};\n\nexport default api;"],"names":["ReviewsList","styled","ReviewsItem","theme","ReviewsTitle","Message","movieId","useParams","useState","reviews","setReviews","useEffect","API","fetchReviews","console","log","getMovieReviews","length","map","id","author","content","apiInstance","axios","baseURL","params","api_key","language","fetchTrendingMovies","page","get","response","data","results","Error","fetchMovieById","fetchSearchMovies","query","fetchMovieCredits","cast","fetchMovieReviews","api"],"sourceRoot":""}