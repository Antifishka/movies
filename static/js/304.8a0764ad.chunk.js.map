{"version":3,"file":"static/js/304.8a0764ad.chunk.js","mappings":"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","sources":["components/MoviesItem/MoviesItem.styled.js","components/MoviesItem/MoviesItem.jsx","constants/constants.js","pages/Home/Home.styled.js","pages/Home/Home.jsx","services/api.js"],"sourcesContent":["import styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\nexport const MoviesCard = styled.li`\n  padding: 4px;\n  border-radius: 4px;\n  overflow: hidden;\n  box-shadow: 0px 1px 1px rgb(0 0 0 / 12%), \n  0px 4px 4px rgb(0 0 0 / 6%), \n  1px 4px 6px rgb(0 0 0 / 16%);\n\n  transform: scale(1);\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus{\n    transform: scale(1.03);\n  };\n`;\n\nexport const StyledLink = styled(Link)`\n  text-decoration: none;\n  color: inherit;\n`;\n\nexport const MoviesImg = styled.img`\n  width: 100%;\n  border-radius: 4px;\n  height: 300px;\n  object-fit: cover;\n  margin-bottom: auto;\n`;\n\nexport const MoviesCardInfo = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 8px 0 0 0;\n`;\n\nexport const MoviesTitle = styled.h4`\n  max-width: 158px; \n`;\n\nexport const MoviesVote = styled.p`\n  padding: 2px 4px;\n  border-radius: 4px;\n  color: white;\n  background-color: orangered;\n\n  font-size: 12px; \n  font-weight: 600;\n`;","import { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { MoviesCard, StyledLink, MoviesImg, MoviesCardInfo, MoviesTitle, MoviesVote } from \"./MoviesItem.styled\";\n\nexport const MoviesItem = ({ id, title, imagePath, vote }) => {\n    const { pathname, search } = useLocation();\n    const fromPage = `${pathname}${search}`;\n\n    return (\n        <MoviesCard>\n            <StyledLink to={`/movies/${id}`} state={{from: fromPage}}>\n                <MoviesImg src={imagePath} alt={title} />\n                <MoviesCardInfo>\n                    <MoviesTitle>{title}</MoviesTitle>\n                    <MoviesVote>{vote}\n                    </MoviesVote>\n                </MoviesCardInfo>\n            </StyledLink>\n        </MoviesCard>\n    );\n};\n\nMoviesItem.propTypes = {\n    // id: PropTypes.number.isRequired,\n    imagePath: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    // vote: PropTypes.number.isRequired,\n}","export const BASE_IMAGE_URL = `https://image.tmdb.org/t/p/w500`;\nexport const PlACEHOLDER_IMAGE_URL = `https://via.placeholder.com/100x150`;\nexport const PlACEHOLDER_POSTER_URL = `https://placehold.jp/200x300.png`;","import styled from \"styled-components\";\n\nexport const HomeTitle = styled.h2`\n  padding-top: 20px;\n  margin-bottom: 20px;\n  text-align: center;\n`;\n\nexport const MoviesList = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  gap: 16px;\n  margin-bottom: 20px;\n`;\n\n","import { useState, useEffect } from \"react\";\nimport API from '../../services/api';\nimport { Loader } from \"components/Loader/Loader\";\nimport { BASE_IMAGE_URL, PlACEHOLDER_IMAGE_URL } from 'constants/constants';\nimport { HomeTitle, MoviesList } from \"./Home.styled\";\nimport { MoviesItem } from \"components/MoviesItem/MoviesItem\";\n// import { Pagination } from \"components/Pagination/Pagination\";\n\nconst Home = () => {\n  const [trendingMovies, setTrendingMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getTrendinngMovies();\n\n    async function getTrendinngMovies() {\n      try {\n        const fetchMovies = await API.fetchTrendingMovies();\n        console.log(fetchMovies);\n        setTrendingMovies(fetchMovies);\n\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      };\n    };\n  }, []);\n\n  return (\n    <main>\n      <HomeTitle>Trending today</HomeTitle>\n\n      {isLoading && <Loader />} \n\n      <MoviesList>\n        {trendingMovies.map(({ id, title, poster_path, vote_average }) => (\n          <MoviesItem \n            key={id}\n            id={id}\n            title={title} \n            imagePath={poster_path\n              ? BASE_IMAGE_URL + poster_path\n              : PlACEHOLDER_IMAGE_URL} \n            vote={vote_average\n              ? vote_average.toFixed(1)\n              : `No vote`\n          } />\n        ))}\n      </MoviesList>\n\n      {/* <Pagination/> */}\n    </main>\n  );\n};\n\nexport default Home;","import axios from \"axios\";\n\nconst apiInstance = axios.create({\n    baseURL: 'https://api.themoviedb.org/3/',\n    params: {\n        api_key: 'e09f06c48afcb3ebfd8a25b0b6965d1e',\n        language: 'en-US',\n        // page: `${page}`,\n    },\n});\n\nasync function fetchTrendingMovies() {\n    const response = await apiInstance.get('trending/movie/day');\n     \n    const trendingMovies = response.data.results;\n\n    if (!trendingMovies.length) {\n        throw new Error(`Sorry, there are no movies.`)\n    }\n\n    return trendingMovies;\n};\n\nasync function fetchMovieById(id) {\n    const { data } = await apiInstance.get(`movie/${id}`);\n\n    return data;\n}\n\nasync function fetchSearchMovies(query) {\n    const response = await apiInstance.get(`search/movie?query=${query}`);\n\n    const searchMovies = response.data.results;\n\n    if (!searchMovies.length) {\n        throw new Error(`Sorry, there are no movies matching your search query. Please try again.`)\n    }\n\n    return searchMovies;\n}\n\nasync function fetchMovieCredits(id) {\n    const response = await apiInstance.get(`movie/${id}/credits`);\n\n    const cast = response.data.cast;\n\n    if (!cast.length) {\n        throw new Error(`Not found cast...`)\n    }\n\n    return cast;\n}\n\nasync function fetchMovieReviews(id) {\n    const response = await apiInstance.get(`movie/${id}/reviews`);\n\n    const reviews = response.data.results;\n\n    return reviews;\n};\n\nconst api = {\n    fetchTrendingMovies,\n    fetchMovieById,\n    fetchSearchMovies,\n    fetchMovieCredits,\n    fetchMovieReviews,\n};\n\nexport default api;"],"names":["MoviesCard","styled","StyledLink","Link","MoviesImg","MoviesCardInfo","MoviesTitle","MoviesVote","MoviesItem","id","title","imagePath","vote","useLocation","pathname","search","fromPage","to","state","from","src","alt","BASE_IMAGE_URL","PlACEHOLDER_IMAGE_URL","PlACEHOLDER_POSTER_URL","HomeTitle","MoviesList","useState","trendingMovies","setTrendingMovies","isLoading","setIsLoading","useEffect","API","fetchMovies","console","log","getTrendinngMovies","Loader","map","poster_path","vote_average","toFixed","apiInstance","axios","baseURL","params","api_key","language","fetchTrendingMovies","get","response","data","results","length","Error","fetchMovieById","fetchSearchMovies","query","searchMovies","fetchMovieCredits","cast","fetchMovieReviews","reviews","api"],"sourceRoot":""}