{"version":3,"file":"static/js/451.dfd0f9e7.chunk.js","mappings":"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","sources":["components/Cast/CastItem/CastItem.styled.js","components/Cast/CastItem/CastItem.jsx","components/Cast/Cast.styled.js","components/Cast/Cast.jsx","constants/constants.js","services/api.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const CardWrapper = styled.li`\n  border-radius: 4px;\n  overflow: hidden;\n  box-shadow: 0 1px 3px 0 rgb(0 0 0 / 20%), \n   0 1px 1px 0 rgb(0 0 0 / 14%),\n   0 2px 1px -1px rgb(0 0 0 / 12%);\n`;\n\nexport const CardImg = styled.img`\n  width: 100%;\n  object-fit: cover;\n`;\n\nexport const CardInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  padding: 4px;\n  text-align: center;\n  font-size: 12px;\n`;\n\nexport const CardText = styled.p`\n  margin-top: auto;\n`;\n","import PropTypes from 'prop-types';\nimport { CardWrapper, CardImg, CardInfo, CardText } from './CastItem.styled';\n\nexport const CastItem = ({ imagePath, name, character}) => {\n    return (\n        <CardWrapper>\n            <CardImg src={imagePath} alt={name} width=\"100\" />\n\n            <CardInfo>\n                <h4>{name}</h4>\n                <CardText>Character:<br />{character}</CardText>\n            </CardInfo>\n        </CardWrapper>\n    );\n};\n\nCastItem.propTypes = {\n    imagePath: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    character: PropTypes.string.isRequired,\n}","import styled from \"styled-components\";\n\nexport const CastList = styled.ul`\n  padding: 16px 0;\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));\n  gap: 16px;\n`;","import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport API from \"../../services/api\";\nimport { BASE_IMAGE_URL, PlACEHOLDER_IMAGE_URL } from 'constants/constants';\nimport { CastItem } from \"./CastItem/CastItem\";\nimport { CastList } from \"./Cast.styled\";\n\nconst Cast = () => { \n  const { movieId } = useParams(); \n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    getMovieCredits();\n\n    async function getMovieCredits() {\n      try {\n        const fetchCast = await API.fetchMovieCredits(movieId);\n        \n        const actors = fetchCast.length > 16 ? fetchCast.slice(0, 16) : fetchCast;\n        console.log(actors);\n        setCast(actors);\n\n      } catch (error) {\n        console.log(error);\n      };\n    };\n  }, [movieId]);\n\n  if (!cast) return null;\n\n  return (\n    <CastList>\n      {cast.map(({ id, profile_path, original_name, character }) => \n        <CastItem\n          key={id}\n          imagePath={\n            profile_path\n              ? BASE_IMAGE_URL + profile_path\n              : PlACEHOLDER_IMAGE_URL}\n          name={original_name}\n          character={character}\n        />)\n      } \n    </CastList>\n  );\n};\n \nexport default Cast;","export const BASE_IMAGE_URL = `https://image.tmdb.org/t/p/w500`;\nexport const PlACEHOLDER_IMAGE_URL = `https://via.placeholder.com/100x150`;\nexport const PlACEHOLDER_POSTER_URL = `https://placehold.jp/200x300.png`;","import axios from \"axios\";\n\nconst apiInstance = axios.create({\n    baseURL: 'https://api.themoviedb.org/3/',\n    params: {\n        api_key: 'e09f06c48afcb3ebfd8a25b0b6965d1e',\n        language: 'en-US',\n        // page: `${page}`,\n    },\n});\n\nasync function fetchTrendingMovies(page) {\n    const response = await apiInstance.get(`trending/movie/day?page=${page}`);\n     \n    const data = response.data;\n\n    if (!data.results.length) {\n        throw new Error(`Sorry, there are no movies.`)\n    }\n\n    return data;\n};\n\nasync function fetchMovieById(id) {\n    const { data } = await apiInstance.get(`movie/${id}`);\n\n    return data;\n}\n\nasync function fetchSearchMovies(query) {\n    const response = await apiInstance.get(`search/movie?query=${query}`);\n\n    const searchMovies = response.data.results;\n\n    if (!searchMovies.length) {\n        throw new Error(`Sorry, there are no movies matching your search query. Please try again.`)\n    }\n\n    return searchMovies;\n}\n\nasync function fetchMovieCredits(id) {\n    const response = await apiInstance.get(`movie/${id}/credits`);\n\n    const cast = response.data.cast;\n\n    if (!cast.length) {\n        throw new Error(`Not found cast...`)\n    }\n\n    return cast;\n}\n\nasync function fetchMovieReviews(id) {\n    const response = await apiInstance.get(`movie/${id}/reviews`);\n\n    const reviews = response.data.results;\n\n    return reviews;\n};\n\nconst api = {\n    fetchTrendingMovies,\n    fetchMovieById,\n    fetchSearchMovies,\n    fetchMovieCredits,\n    fetchMovieReviews,\n};\n\nexport default api;"],"names":["CardWrapper","styled","CardImg","CardInfo","CardText","CastItem","imagePath","name","character","src","alt","width","CastList","movieId","useParams","useState","cast","setCast","useEffect","API","fetchCast","actors","length","slice","console","log","getMovieCredits","map","id","profile_path","original_name","BASE_IMAGE_URL","PlACEHOLDER_IMAGE_URL","PlACEHOLDER_POSTER_URL","apiInstance","axios","baseURL","params","api_key","language","fetchTrendingMovies","page","get","response","data","results","Error","fetchMovieById","fetchSearchMovies","query","searchMovies","fetchMovieCredits","fetchMovieReviews","reviews","api"],"sourceRoot":""}